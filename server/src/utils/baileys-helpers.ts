/**
 * Baileys Helper Functions
 * 
 * Utiliza fun√ß√µes nativas do @whiskeysockets/baileys para normaliza√ß√£o
 * e compara√ß√£o de JIDs do WhatsApp de forma robusta e confi√°vel.
 * 
 * Benef√≠cios:
 * - Remove duplica√ß√£o de c√≥digo
 * - Usa l√≥gica oficial do Baileys (testada e mantida)
 * - Resolve problemas de @lid vs @s.whatsapp.net
 * - Mant√©m compatibilidade com n√∫meros brasileiros
 */

import { areJidsSameUser, jidNormalizedUser } from '@whiskeysockets/baileys';

/**
 * Compara dois JIDs do WhatsApp para verificar se s√£o do mesmo usu√°rio.
 * 
 * Esta fun√ß√£o usa a l√≥gica oficial do Baileys que resolve corretamente:
 * - @lid (identificador tempor√°rio) vs @s.whatsapp.net (n√∫mero permanente)
 * - Varia√ß√µes de formato (@c.us, @s.whatsapp.net)
 * - IDs de dispositivo (sufixo :98@, :99@, etc)
 * 
 * @param jid1 - Primeiro JID (ex: "554191188909@s.whatsapp.net")
 * @param jid2 - Segundo JID (ex: "1234567@lid")
 * @returns true se ambos representam o mesmo usu√°rio
 * 
 * @example
 * ```typescript
 * // Mesmo usu√°rio com diferentes formatos
 * compareJids("554191188909@s.whatsapp.net", "554191188909@c.us") // true
 * 
 * // Resolvendo @lid corretamente
 * compareJids("1234567@lid", "554191188909@s.whatsapp.net") // true (se forem o mesmo)
 * 
 * // Diferentes usu√°rios
 * compareJids("5541911111111@s.whatsapp.net", "5541922222222@s.whatsapp.net") // false
 * ```
 */
export function compareJids(jid1: string, jid2: string): boolean {
  try {
    const result = areJidsSameUser(jid1, jid2);
    console.log(`üîç [compareJids] Comparing: ${jid1} === ${jid2} ‚Üí ${result}`);
    return result;
  } catch (error) {
    console.warn(`‚ö†Ô∏è [compareJids] Error comparing JIDs: ${jid1} vs ${jid2}`, error);
    // Fallback: compara√ß√£o simples de n√∫meros
    return normalizeJid(jid1) === normalizeJid(jid2);
  }
}

/**
 * Normaliza um JID do WhatsApp usando a fun√ß√£o oficial do Baileys.
 * 
 * Remove varia√ß√µes e padroniza o formato, mas N√ÉO adiciona o 9¬∫ d√≠gito
 * para n√∫meros brasileiros (isso √© feito pela fun√ß√£o normalizeWhatsAppNumber).
 * 
 * @param jid - JID a ser normalizado
 * @returns JID normalizado no formato padr√£o
 * 
 * @example
 * ```typescript
 * normalizeJid("5541911889909:98@s.whatsapp.net") // "5541911889909@s.whatsapp.net"
 * normalizeJid("5541911889909@c.us") // "5541911889909@s.whatsapp.net"
 * normalizeJid("1234567@lid") // "1234567@lid" (mant√©m @lid se n√£o puder resolver)
 * ```
 */
export function normalizeJid(jid: string): string {
  try {
    const normalized = jidNormalizedUser(jid);
    console.log(`üìû [normalizeJid] Normalized: ${jid} ‚Üí ${normalized}`);
    return normalized;
  } catch (error) {
    console.warn(`‚ö†Ô∏è [normalizeJid] Error normalizing: ${jid}`, error);
    // Fallback: limpeza b√°sica manual
    return jid
      .replace(/:\d+@/, '@')  // Remove device ID
      .replace('@c.us', '@s.whatsapp.net')
      .replace(/\s/g, ''); // Remove espa√ßos
  }
}

/**
 * Normaliza n√∫mero do WhatsApp aplicando regras brasileiras + normaliza√ß√£o Baileys.
 * 
 * Esta fun√ß√£o combina o melhor de dois mundos:
 * 1. Usa jidNormalizedUser do Baileys para padroniza√ß√£o oficial
 * 2. Adiciona l√≥gica espec√≠fica para n√∫meros brasileiros (9¬∫ d√≠gito)
 * 
 * Regras aplicadas (em ordem):
 * 1. Normaliza√ß√£o via Baileys (remove device IDs, padroniza sufixos)
 * 2. Normaliza√ß√£o brasileira (adiciona 9¬∫ d√≠gito se necess√°rio)
 * 3. Formato final: number@s.whatsapp.net ou number@g.us
 * 
 * @param remoteJid - JID do contato/grupo
 * @param isGroup - Se √© um grupo (usa @g.us ao inv√©s de @s.whatsapp.net)
 * @returns JID normalizado no formato correto
 * 
 * @example
 * ```typescript
 * // N√∫mero brasileiro sem 9¬∫ d√≠gito ‚Üí adiciona
 * normalizeWhatsAppNumber("554191188909@s.whatsapp.net") // "5541991188909@s.whatsapp.net"
 * 
 * // N√∫mero brasileiro j√° correto ‚Üí mant√©m
 * normalizeWhatsAppNumber("5541991188909@s.whatsapp.net") // "5541991188909@s.whatsapp.net"
 * 
 * // Grupo ‚Üí mant√©m @g.us
 * normalizeWhatsAppNumber("123456789@g.us", true) // "123456789@g.us"
 * 
 * // Device ID removido
 * normalizeWhatsAppNumber("5541991188909:98@s.whatsapp.net") // "5541991188909@s.whatsapp.net"
 * ```
 */
export function normalizeWhatsAppNumber(remoteJid: string, isGroup: boolean = false): string {
  // 1. Normalizar via Baileys primeiro (remove device IDs, padroniza sufixos)
  let normalized = normalizeJid(remoteJid);

  // 2. Detectar se √© grupo (verificar antes de remover sufixos)
  const isGroupJid = isGroup || normalized.includes('@g.us');

  // 3. Extrair apenas o n√∫mero (sem sufixos)
  let cleanNumber = normalized
    .replace('@s.whatsapp.net', '')
    .replace('@g.us', '')
    .replace('@c.us', '')
    .replace('@lid', '');

  // 4. Aplicar normaliza√ß√£o brasileira (adicionar 9¬∫ d√≠gito se necess√°rio)
  if (cleanNumber.startsWith('55') && !isGroupJid) {
    cleanNumber = normalizeBrazilianNumber(cleanNumber);
  }

  // 5. Retornar com sufixo correto
  const result = isGroupJid ? `${cleanNumber}@g.us` : `${cleanNumber}@s.whatsapp.net`;

  console.log(`üáßüá∑ [normalizeWhatsAppNumber] ${remoteJid} ‚Üí ${result}`);
  return result;
}

/**
 * Normaliza n√∫meros brasileiros adicionando o 9¬∫ d√≠gito se necess√°rio.
 * 
 * Formato moderno brasileiro: 55 (pa√≠s) + 2 d√≠gitos (DDD) + 9 d√≠gitos (n√∫mero)
 * Total: 13 d√≠gitos
 * 
 * Exemplos de normaliza√ß√£o:
 * - 554191188909 (12 d√≠gitos) ‚Üí 5541991188909 (adiciona 9)
 * - 5541991188909 (13 d√≠gitos) ‚Üí mant√©m (j√° est√° correto)
 * - 55419909 (8 d√≠gitos) ‚Üí 5541991889909 (assume DDD 41, adiciona 9)
 * 
 * @param number - N√∫mero brasileiro (sem sufixos, apenas d√≠gitos)
 * @returns N√∫mero normalizado com 13 d√≠gitos
 */
function normalizeBrazilianNumber(number: string): string {
  const withoutCountry = number.substring(2); // Remove "55"

  // Caso 1: 8 d√≠gitos (formato muito antigo) - assumir DDD 11 e adicionar 9
  if (withoutCountry.length === 8) {
    const phone = withoutCountry;
    const result = `55119${phone}`; // DDD padr√£o 11 (S√£o Paulo)
    console.log(`üáßüá∑ [normalizeBrazilianNumber] 8‚Üí13 d√≠gitos: ${number} ‚Üí ${result}`);
    return result;
  }

  // Caso 2: 9 d√≠gitos (DDD + 8 d√≠gitos) - adicionar 9 ap√≥s DDD
  if (withoutCountry.length === 9) {
    const ddd = withoutCountry.substring(0, 2);
    const phone = withoutCountry.substring(2);
    const result = `55${ddd}9${phone}`;
    console.log(`üáßüá∑ [normalizeBrazilianNumber] 9‚Üí13 d√≠gitos: ${number} ‚Üí ${result}`);
    return result;
  }

  // Caso 3: 10 d√≠gitos (DDD + telefone sem 9¬∫ d√≠gito)
  if (withoutCountry.length === 10) {
    const ddd = withoutCountry.substring(0, 2);
    const phone = withoutCountry.substring(2);
    
    // Verificar se o telefone tem 8 d√≠gitos (faltando o 9¬∫)
    if (phone.length === 8) {
      const result = `55${ddd}9${phone}`;
      console.log(`üáßüá∑ [normalizeBrazilianNumber] 10‚Üí13 d√≠gitos: ${number} ‚Üí ${result}`);
      return result;
    }
    // Se phone tem 9 d√≠gitos, mas total √© 10, est√° estranho - manter como est√°
    console.log(`‚ö†Ô∏è [normalizeBrazilianNumber] 10 d√≠gitos estranho, mantendo: ${number}`);
    return number;
  }

  // Caso 4: 11 d√≠gitos (formato correto moderno - n√£o mexer)
  if (withoutCountry.length === 11) {
    console.log(`‚úÖ [normalizeBrazilianNumber] J√° tem 11 d√≠gitos (correto): ${number}`);
    return number;
  }

  // Caso 5: 12 d√≠gitos (DDD + 9 + telefone, mas falta o 55)
  if (withoutCountry.length === 12) {
    console.log(`‚ö†Ô∏è [normalizeBrazilianNumber] 12 d√≠gitos inesperado, mantendo: ${number}`);
    return number;
  }

  // Outros casos: retornar como est√°
  console.log(`‚ö†Ô∏è [normalizeBrazilianNumber] Tamanho inesperado (${withoutCountry.length}), mantendo: ${number}`);
  return number;
}

/**
 * Extrai o n√∫mero puro de um JID (sem sufixos).
 * 
 * @param jid - JID completo
 * @returns Apenas os d√≠gitos do n√∫mero
 * 
 * @example
 * ```typescript
 * extractNumber("5541991188909@s.whatsapp.net") // "5541991188909"
 * extractNumber("123456789@g.us") // "123456789"
 * extractNumber("1234567@lid") // "1234567"
 * ```
 */
export function extractNumber(jid: string): string {
  return jid
    .replace('@s.whatsapp.net', '')
    .replace('@g.us', '')
    .replace('@c.us', '')
    .replace('@lid', '')
    .replace(/:\d+@/g, ''); // Remove device IDs
}

/**
 * Verifica se um JID √© de um grupo.
 * 
 * @param jid - JID a verificar
 * @returns true se for um grupo
 */
export function isGroupJid(jid: string): boolean {
  return jid.includes('@g.us');
}

/**
 * Verifica se um JID √© um @lid (identificador tempor√°rio).
 * 
 * @param jid - JID a verificar
 * @returns true se for um @lid
 */
export function isLidJid(jid: string): boolean {
  return jid.includes('@lid');
}
