/**
 * WhatsApp Number Normalizer
 * 
 * Servi√ßo respons√°vel por normaliza√ß√£o de n√∫meros do WhatsApp e resolu√ß√£o de @lid.
 * Agora utiliza helpers do Baileys para maior confiabilidade.
 * 
 * REFATORADO: Agora usa baileys-helpers.ts com fun√ß√µes nativas do Baileys
 * - areJidsSameUser: Compara√ß√£o robusta de JIDs
 * - jidNormalizedUser: Normaliza√ß√£o oficial
 * - Mant√©m cache de @lid ‚Üí n√∫mero real
 */

import { 
  normalizeWhatsAppNumber as normalizeWithBaileys,
  compareJids,
  normalizeJid,
  isLidJid,
  extractNumber
} from '../../utils/baileys-helpers';

export class WhatsAppNumberNormalizer {
  /**
   * Cache para mapeamento @lid ‚Üí n√∫mero real
   */
  private static lidToRealNumberCache = new Map<string, string>();

  /**
   * Cache para mapeamento keyId ‚Üí @lid
   */
  private static keyIdToLidCache = new Map<string, string>();

  /**
   * Cache para mapeamento keyId ‚Üí n√∫mero real
   */
  private static keyIdToRealCache = new Map<string, string>();

  /**
   * Normaliza n√∫mero do WhatsApp aplicando todas as regras em ordem correta.
   * 
   * REFATORADO: Agora usa helpers do Baileys + l√≥gica de @lid cache
   * 
   * @param remoteJid - JID do contato/grupo
   * @param remoteJidAlt - JID alternativo (pode resolver @lid)
   * @param isGroup - Se √© um grupo
   * @returns JID normalizado no formato: number@s.whatsapp.net ou number@g.us
   */
  static normalizeWhatsAppNumber(
    remoteJid: string,
    remoteJidAlt?: string | null,
    isGroup: boolean = false
  ): string {
    // 1. PRIORITY: Usar remoteJidAlt se for um n√∫mero real (n√£o @lid)
    let number = remoteJid;
    if (remoteJidAlt && !isLidJid(remoteJidAlt)) {
      console.log(`üîÑ [normalizeWhatsAppNumber] Usando remoteJidAlt: ${remoteJid} ‚Üí ${remoteJidAlt}`);
      number = remoteJidAlt;
    }

    // 2. Resolver @lid se poss√≠vel (cache ou remoteJidAlt)
    if (isLidJid(number)) {
      if (remoteJidAlt && remoteJidAlt.includes('@s.whatsapp.net')) {
        console.log(`üîÑ [normalizeWhatsAppNumber] Resolvendo @lid via remoteJidAlt: ${number} ‚Üí ${remoteJidAlt}`);
        number = remoteJidAlt;
      } else {
        const cached = this.lidToRealNumberCache.get(number);
        if (cached) {
          console.log(`üîÑ [normalizeWhatsAppNumber] Resolvendo @lid via cache: ${number} ‚Üí ${cached}`);
          number = cached;
        } else {
          console.warn(`‚ö†Ô∏è [normalizeWhatsAppNumber] N√£o foi poss√≠vel resolver @lid: ${number} - usando Baileys normalizer`);
          // Baileys vai lidar com @lid da melhor forma poss√≠vel
        }
      }
    }

    // 3. Usar helper do Baileys para normaliza√ß√£o completa (inclui l√≥gica brasileira)
    const result = normalizeWithBaileys(number, isGroup);

    console.log(`üìû [normalizeWhatsAppNumber] Final: ${remoteJid} ‚Üí ${result}`);
    return result;
  }

  /**
   * Normaliza remoteJid (vers√£o simplificada).
   * 
   * REFATORADO: Usa normalizeJid do Baileys
   */
  static normalizeRemoteJid(remoteJid: string): string {
    const isGroup = remoteJid.includes('@g.us');
    return normalizeWithBaileys(remoteJid, isGroup);
  }

  /**
   * Formatar n√∫mero com sufixo @s.whatsapp.net para Evolution API.
   * NUNCA usar @lid - sempre converter para @s.whatsapp.net
   * 
   * REFATORADO: Usa helper do Baileys
   */
  static formatRemoteJid(number: string): string {
    // Se j√° tem @, verificar se √© @lid e substituir
    if (number.includes('@')) {
      // Se √© @lid, normalizar via Baileys
      if (isLidJid(number)) {
        const normalized = normalizeJid(number);
        console.log(`üîÑ [formatRemoteJid] Convertendo @lid: ${number} ‚Üí ${normalized}`);
        return normalized;
      }
      return normalizeJid(number); // Normalizar via Baileys
    }

    // Verificar se √© grupo
    if (number.includes('-')) {
      return `${number}@g.us`;
    }

    return `${number}@s.whatsapp.net`;
  }

  /**
   * Registrar mapeamento entre @lid e n√∫mero real dos eventos messages.update
   */
  static recordLidMapping(keyId: string, lidNumber: string | null, realNumber: string | null): void {
    if (lidNumber && isLidJid(lidNumber)) {
      this.keyIdToLidCache.set(keyId, lidNumber);
    }

    if (realNumber && realNumber.includes('@s.whatsapp.net')) {
      this.keyIdToRealCache.set(keyId, realNumber);
    }

    // Se temos ambos para este keyId, criar o mapeamento
    const lid = this.keyIdToLidCache.get(keyId);
    const real = this.keyIdToRealCache.get(keyId);

    if (lid && real) {
      this.lidToRealNumberCache.set(lid, real);
      console.log(`‚úÖ [recordLidMapping] Mapped: ${lid} ‚Üí ${real}`);
    }
  }

  /**
   * Resolver @lid para n√∫mero real se dispon√≠vel no cache
   */
  static resolveLidToRealNumber(remoteJid: string): string {
    if (isLidJid(remoteJid)) {
      const realNumber = this.lidToRealNumberCache.get(remoteJid);
      if (realNumber) {
        console.log(`üîÑ [resolveLidToRealNumber] Resolved @lid: ${remoteJid} ‚Üí ${realNumber}`);
        return realNumber;
      }
    }
    return remoteJid;
  }

  /**
   * Compara dois JIDs para verificar se s√£o do mesmo usu√°rio.
   * 
   * NOVO: Usa areJidsSameUser do Baileys para compara√ß√£o robusta
   */
  static compareJids(jid1: string, jid2: string): boolean {
    return compareJids(jid1, jid2);
  }
}
